// Generated by CoffeeScript 2.5.1
(function() {
  //!/usr/bin/env coffee

  var CSSE_Covid_19_Data_Source, CSSE_Data_Admin2, CSSE_Data_Country_Region, CSSE_Data_Province_State, CSSE_Data_World, create_CSSE_Covid_19_Data, csv, fetch;

  if (typeof window !== "undefined" && window !== null) {
    fetch = window.fetch;
    csv = window.csv;
  } else {
    fetch = require('node-fetch');
    csv = require('csvtojson');
  }

  CSSE_Covid_19_Data_Source = class CSSE_Covid_19_Data_Source {
    constructor() {
      this.init = this.init.bind(this);
      this.date_to_url = this.date_to_url.bind(this);
      this.fetch_url = this.fetch_url.bind(this);
      
      // async
      this.fetch_csse_data = this.fetch_csse_data.bind(this);
      this.path = "/csse_covid_19_data/csse_covid_19_daily_reports";
      this.repo_root = "raw.githubusercontent.com/CSSEGISandData/COVID-19/master";
      this.date = new Date();
      this.url = this.date_to_url(this.date);
    }

    async init() {
      var csse_data;
      csse_data = (await this.fetch_csse_data());
      this.world = new CSSE_Data_World(csse_data);
      this.countries = this.world.countries;
      this.states = this.countries.US.states;
      return this;
    }

    date_to_url(date) {
      var csv_file, day, month, url, year;
      month = `0${date.getMonth() + 1}`.slice(-2);
      day = `0${date.getDate()}`.slice(-2);
      year = date.getFullYear();
      csv_file = `${month}-${day}-${year}.csv`;
      url = `https://${this.repo_root}/${this.path}/${csv_file}`;
      return url;
    }

    fetch_url(url) {
      var e;
      try {
        return fetch(this.url);
      } catch (error) {
        e = error;
      }
    }

    async fetch_csse_data() {
      var csse_data, csv_str, res;
      this.url = this.date_to_url(this.date);
      res = (await this.fetch_url(this.url));
      while (res.status !== 200) {
        this.date.setDate(this.date.getDate() - 1);
        this.url = this.date_to_url(this.date);
        res = (await this.fetch_url(this.url));
      }
      csv_str = (await res.text());
      csse_data = csv().fromString(csv_str);
      return csse_data;
    }

  };

  CSSE_Data_World = class CSSE_Data_World {
    constructor(data) {
      this.init = this.init.bind(this);
      this.data = data;
      this.countries = {};
      this.cases = 0;
      this.deaths = 0;
      this.init();
    }

    init() {
      var hash, i, key, len, ref, results, val, x;
      hash = {};
      ref = this.data;
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        this.cases += Number(x.Confirmed);
        this.deaths += Number(x.Deaths);
        key = x.Country_Region;
        if (hash[key]) {
          hash[key].push(x);
        } else {
          hash[key] = [x];
        }
      }
      results = [];
      for (key in hash) {
        val = hash[key];
        results.push(this.countries[key] = new CSSE_Data_Country_Region(this, val));
      }
      return results;
    }

  };

  CSSE_Data_Country_Region = class CSSE_Data_Country_Region {
    constructor(parent, data) {
      this.init = this.init.bind(this);
      this.parent = parent;
      this.data = data;
      this.states = {};
      this.cases = 0;
      this.deaths = 0;
      this.init();
    }

    init() {
      var hash, i, key, len, ref, results, val, x;
      hash = {};
      ref = this.data;
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        this.cases += Number(x.Confirmed);
        this.deaths += Number(x.Deaths);
        key = x['Province_State'];
        if (hash[key]) {
          hash[key].push(x);
        } else {
          hash[key] = [x];
        }
      }
      results = [];
      for (key in hash) {
        val = hash[key];
        results.push(this.states[key] = new CSSE_Data_Province_State(this, val));
      }
      return results;
    }

  };

  CSSE_Data_Province_State = class CSSE_Data_Province_State {
    constructor(parent, data) {
      this.init = this.init.bind(this);
      this.parent = parent;
      this.data = data;
      this.counties = {};
      this.cases = 0;
      this.deaths = 0;
      this.init();
    }

    init() {
      var county, hash, i, key, len, ref, results, val, x;
      hash = {};
      ref = this.data;
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        this.cases += Number(x.Confirmed);
        this.deaths += Number(x.Deaths);
        key = x['Admin2'];
        if (hash[key]) {
          hash[key].push(x);
        } else {
          hash[key] = [x];
        }
      }
      results = [];
      for (key in hash) {
        val = hash[key];
        county = new CSSE_Data_Admin2(this, val);
        results.push(this.counties[key] = county);
      }
      return results;
    }

  };

  CSSE_Data_Admin2 = class CSSE_Data_Admin2 {
    constructor(parent, data) {
      this.init = this.init.bind(this);
      this.parent = parent;
      this.data = data;
      this.cases = 0;
      this.deaths = 0;
      this.init();
    }

    init() {
      var d, i, len, ref, results;
      ref = this.data;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        d = ref[i];
        this.cases += Number(d.Confirmed);
        results.push(this.deaths += Number(d.Deaths));
      }
      return results;
    }

  };

  
  // async
  create_CSSE_Covid_19_Data = function() {
    var csse_Covid_19_Data;
    csse_Covid_19_Data = new CSSE_Covid_19_Data_Source();
    return csse_Covid_19_Data.init();
  };

  if (typeof window !== "undefined" && window !== null) {
    window.CSSE_Covid_19_Data_Source = CSSE_Covid_19_Data_Source;
    window.create_CSSE_Covid_19_Data = create_CSSE_Covid_19_Data;
  } else {
    exports.CSSE_Covid_19_Data_Source = CSSE_Covid_19_Data_Source;
    exports.create = create_CSSE_Covid_19_Data;
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/usr/local/server/git/clones/covid_19_data/src/csse_covid_19_data.coffee