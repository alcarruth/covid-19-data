// Generated by CoffeeScript 2.5.1
(function() {
  //!/usr/bin/env coffee

  var Covid_19_Data, Style_Manager, Table_Body, Table_Header, Table_View, csse_covid_19_data, csv, fetch, normal_sort, per_million, population_data;

  if (typeof window !== "undefined" && window !== null) {
    fetch = window.fetch;
  } else {
    fetch = require('node-fetch');
    csv = require('csvtojson');
    population_data = require('./js/populations.json');
    csse_covid_19_data = require('./csse_covid_19_data');
  }

  per_million = function(x, y) {
    if (y !== 0) {
      return Number((1000000 * x / y).toFixed());
    }
  };

  normal_sort = function(spec) {
    var column, direction;
    ({column, direction} = spec);
    return function(a, b) {
      if (direction === 'ascending') {
        [a, b] = [b, a];
      }
      if (a[column] < b[column]) {
        return 1;
      }
      if (a[column] > b[column]) {
        return -1;
      }
      return 0;
    };
  };

  Covid_19_Data = class Covid_19_Data {
    constructor(spec) {
      var i, k, len, ref;
      // call after document loaded
      this.init = this.init.bind(this);
      this.merge_data = this.merge_data.bind(this);
      this.update_views = this.update_views.bind(this);
      this.add_view = this.add_view.bind(this);
      this.sort_data = this.sort_data.bind(this);
      ref = ['id', 'main_column', 'date', 'covid_19_data', 'population_data'];
      for (i = 0, len = ref.length; i < len; i++) {
        k = ref[i];
        this[k] = spec[k];
      }
      this.main_column.id = this.main_column.key.replace(/_/g, '-');
      this.data = this.merge_data();
      this.views = [];
      this.current_sort = {
        column: null,
        direction: null
      };
    }

    init() {
      return this.add_view(this.data);
    }

    merge_data() {
      var cases, cases_per_million, data, deaths, deaths_per_cent, deaths_per_million, name, obj, population, ref, row;
      data = [];
      ref = this.covid_19_data;
      for (name in ref) {
        obj = ref[name];
        population = this.population_data[name];
        if (population && population > 1000000) {
          cases = obj.cases;
          cases_per_million = per_million(cases, population);
          deaths = obj.deaths;
          deaths_per_million = per_million(deaths, population);
          deaths_per_cent = (100 * deaths / cases).toFixed();
          row = {population, cases, cases_per_million, deaths, deaths_per_million, deaths_per_cent};
          row[this.main_column.key] = name;
          data.push(row);
        }
      }
      return data;
    }

    update_views() {
      var i, len, ref, results, view;
      ref = this.views;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        view = ref[i];
        results.push(view.update());
      }
      return results;
    }

    add_view() {
      var parent_elt_id, view, view_id;
      view_id = this.views.length;
      parent_elt_id = `${this.id}-div`;
      view = new Table_View(this, view_id, parent_elt_id);
      view.update();
      return this.views.push(view);
    }

    async sort_data(spec) {
      var data;
      console.log(`sort_data(${spec})`);
      data = (await this.data);
      data.sort(normal_sort(spec));
      this.current_sort = spec;
      return this.update_views();
    }

  };

  Style_Manager = class Style_Manager {
    constructor() {
      this.set_style = this.set_style.bind(this);
      this.toggle_style = this.toggle_style.bind(this);
      this.current_style = 'dark';
      this.styles = {
        light: document.getElementById('light-style'),
        dark: document.getElementById('dark-style')
      };
    }

    set_style(name) {
      var style;
      style = this.styles[name];
      document.head.appendChild(style);
      return this.current_style = name;
    }

    toggle_style() {
      var name;
      name = {
        light: 'dark',
        dark: 'light'
      }[this.current_style];
      return this.set_style(name);
    }

  };

  Table_View = class Table_View {
    constructor(table, id1, parent_elt_id1) {
      /*
          @covid_src_elt = document.getElementById('covid-data-src')
          covid_data_url = @table.covid_data_source.url
          link = "<a src=\"#{covid_data_url}\"> #{covid_data_url} </a>"
          @covid_src_elt.innerHTML = "covid-19 data source: #{link}: (fetched #{@date})}"

          @pop_src_elt = document.getElementById('un-data-src')
          population_url = @table.population_data_source.url 
          link = "<a src=\"#{population_url}\"> https://data.un.org/ </a>"
          @pop_src_elt.innerHTML = "Population data source: #{link}"
      */
      // creates and installs new table element
      this.update = this.update.bind(this);
      this.highlight = this.highlight.bind(this);
      this.table = table;
      this.id = id1;
      this.parent_elt_id = parent_elt_id1;
      console.log(this.parent_elt_id);
      this.elt_id = `${this.id}-iew_`;
      this.elt = document.createElement('table');
      this.elt.setAttribute('id', this.elt_id);
      this.elt.setAttribute('class', 'table-view');
      this.date_elt = document.createElement('p');
      this.date_elt.innerText = `${this.table.date}`;
      this.style_manager = new Style_Manager();
      this.toggle_button = document.createElement('button');
      this.toggle_button.setAttribute('id', 'toggle-button');
      this.toggle_button.innerText = "Toggle Style";
      this.toggle_button.onclick = this.style_manager.toggle_style;
      this.parent_elt = document.getElementById(this.parent_elt_id);
      this.parent_elt.appendChild(this.date_elt);
      this.parent_elt.appendChild(this.toggle_button);
      this.parent_elt.appendChild(this.elt);
      this.h1_elt = this.parent_elt.getElementsByClassName('table-h1')[0];
      this.h1_elt.innerHTML = `Corona Virus Data by ${this.table.main_column.name}`;
      this.thead = new Table_Header(this.table);
      this.tbody = new Table_Body(this.table);
      this.elt.appendChild(this.thead.elt);
      this.elt.appendChild(this.tbody.elt);
    }

    update(data) {
      var tbody;
      // create new <tbody> element from current data
      tbody = new Table_Body(this.table);
      this.tbody.elt.replaceWith(tbody.elt);
      this.tbody = tbody;
      return this.highlight(this.table.current_sort.column);
    }

    highlight(column = null) {
      var className, elements, i, j, len, len1, ref, results, td_elt, th_elt;
      if (column !== null) {
        ref = this.elt.getElementsByClassName('column-header');
        for (i = 0, len = ref.length; i < len; i++) {
          th_elt = ref[i];
          th_elt.classList.remove('highlight');
          className = column.replace(/_/g, '-');
          console.log(`highlighting: ${className} column.`);
          elements = this.elt.getElementsByClassName(className);
          console.log(elements);
        }
        results = [];
        for (j = 0, len1 = elements.length; j < len1; j++) {
          td_elt = elements[j];
          results.push(td_elt.classList.add('highlight'));
        }
        return results;
      }
    }

  };

  Table_Header = class Table_Header {
    constructor(table) {
      this.handle_click = this.handle_click.bind(this);
      this.add_column = this.add_column.bind(this);
      this.table = table;
      this.elt = document.createElement('thead');
      this.elt.setAttribute('id', 'table-header');
      this.tr_elt = document.createElement('tr');
      this.elt.appendChild(this.tr_elt);
      this.defaults = {};
      this.add_column('rank', {
        innerHTML: '#',
        classes: ['rank']
      });
      this.add_column(this.table.main_column.key, {
        sort_order: 'ascending',
        innerHTML: this.table.main_column.name,
        classes: [this.table.main_column.id, 'main-column', 'column-header']
      });
      this.add_column('population', {
        sort_order: 'descending',
        innerHTML: 'Population',
        classes: ['population', 'column-header']
      });
      this.add_column('cases', {
        sort_order: 'descending',
        innerHTML: 'Cases',
        classes: ['cases', 'column-header']
      });
      this.add_column('cases_per_million', {
        innerHTML: 'Cases / Million',
        sort_order: 'descending',
        classes: ['cases-per-million', 'column-header']
      });
      this.add_column('deaths', {
        sort_order: 'descending',
        innerHTML: 'Deaths',
        classes: ['deaths', 'column-header']
      });
      this.add_column('deaths_per_million', {
        innerHTML: 'Deaths / Million',
        sort_order: 'descending',
        classes: ['deaths-per-million', 'column-header']
      });
      this.add_column('deaths_per_cent', {
        innerHTML: 'Deaths %',
        sort_order: 'descending',
        classes: ['deaths-per-cent', 'column-header']
      });
    }

    handle_click(column) {
      var direction;
      if (this.table.current_sort.column === column) {
        if (this.table.current_sort.direction === 'ascending') {
          direction = 'descending';
        } else {
          direction = 'ascending';
        }
      } else {
        direction = this.defaults[column].sort_order;
      }
      return this.table.sort_data({column, direction});
    }

    add_column(column, spec = {}) {
      var classes, id, innerHTML, sort_order, th_elt;
      if (column == null) {
        return new Error();
      }
      id = spec.id || column.replace(/_/g, '-');
      innerHTML = spec.innerHTML || column.replace(/_/g, ' ');
      sort_order = spec.sort_order || 'ascending';
      this.defaults[column] = {
        sort_order: sort_order
      };
      classes = spec.classes || [];
      classes.push(id);
      th_elt = document.createElement('th');
      th_elt.setAttribute('id', id);
      th_elt.setAttribute('class', classes.join(' '));
      th_elt.innerHTML = innerHTML;
      if (sort_order !== null) {
        th_elt.onclick = () => {
          return this.handle_click(column);
        };
        th_elt.onmouseover = () => {
          return th_elt.classList.add('mouseover');
        };
        th_elt.onmouseout = () => {
          return th_elt.classList.remove('mouseover');
        };
      }
      return this.tr_elt.appendChild(th_elt);
    }

  };

  Table_Body = class Table_Body {
    constructor(table) {
      var i, len, obj, ref, row_num, rows;
      this.table = table;
      this.elt = document.createElement('tbody');
      rows = "";
      row_num = 1;
      ref = this.table.data;
      // @data is initialized asynchronously by @fetch_data()
      for (i = 0, len = ref.length; i < len; i++) {
        obj = ref[i];
        rows += `<tr>
  <td class="rank"> ${row_num++} </td>
  <td class="${this.table.main_column.id} main-column"> ${obj[this.table.main_column.key]} </td>
  <td class="population"> ${obj.population} </td>
  <td class="cases"> ${obj.cases} </td>
  <td class="cases-per-million"> ${obj.cases_per_million} </td>
  <td class="deaths"> ${obj.deaths} </td>
  <td class="deaths-per-million"> ${obj.deaths_per_million} </td>
  <td class="deaths-per-cent"> ${obj.deaths_per_cent}% </td>
</tr>`;
      }
      this.elt.innerHTML = rows;
    }

  };

  if (typeof window !== "undefined" && window !== null) {
    window.Covid_19_Data = Covid_19_Data;
  } else {
    exports.Covid_19_Data = Covid_19_Data;
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/usr/local/server/git/clones/Corona_Virus/src/covid_19_data.coffee