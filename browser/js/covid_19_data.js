// Generated by CoffeeScript 2.5.1
(function() {
  //!/usr/bin/env coffee

  var Covid_19_Data, Covid_19_Data_View, Style_Manager, csse_covid_19_data, csv, fetch, per_million, population_data, sortable_table;

  if (typeof window !== "undefined" && window !== null) {
    fetch = window.fetch;
  } else {
    fetch = require('node-fetch');
    csv = require('csvtojson');
    population_data = require('./js/populations.json');
    csse_covid_19_data = require('./csse_covid_19_data');
    sortable_table = require('sortable_table');
  }

  per_million = function(x, y) {
    if (y !== 0) {
      return Number((1000000 * x / y).toFixed());
    }
  };

  Style_Manager = class Style_Manager {
    constructor() {
      this.set_style = this.set_style.bind(this);
      this.toggle_style = this.toggle_style.bind(this);
      this.current_style = 'dark';
      this.styles = {
        light: document.getElementById('light-style'),
        dark: document.getElementById('dark-style')
      };
    }

    set_style(name) {
      var style;
      style = this.styles[name];
      document.head.appendChild(style);
      return this.current_style = name;
    }

    toggle_style() {
      var name;
      name = {
        light: 'dark',
        dark: 'light'
      }[this.current_style];
      return this.set_style(name);
    }

  };

  Covid_19_Data = class Covid_19_Data {
    constructor(spec) {
      // call after document loaded
      this.init = this.init.bind(this);
      this.merge_data = this.merge_data.bind(this);
      this.add_view = this.add_view.bind(this);
      this.id = spec.id;
      this.date = spec.date;
      this.main_column = spec.main_column;
      this.covid_19_data = spec.covid_19_data;
      this.population_data = spec.population_data;
      this.data = this.merge_data();
      this.views = [];
    }

    init() {
      return this.add_view(this.data);
    }

    merge_data() {
      var cases, cases_per_million, data, deaths, deaths_per_cent, deaths_per_million, name, obj, population, rank, ref, row;
      data = [];
      rank = 1;
      ref = this.covid_19_data;
      for (name in ref) {
        obj = ref[name];
        population = this.population_data[name];
        if (population && population > 1000000) {
          cases = obj.cases;
          cases_per_million = per_million(cases, population);
          deaths = obj.deaths;
          deaths_per_million = per_million(deaths, population);
          deaths_per_cent = (100 * deaths / cases).toFixed();
          row = {
            rank: rank++,
            population: population,
            cases: cases,
            cases_per_million: cases_per_million,
            deaths: deaths,
            deaths_per_million: deaths_per_million,
            deaths_per_cent: deaths_per_cent
          };
          row[this.main_column.key] = name;
          data.push(row);
        }
      }
      return data;
    }

    add_view(parent_elt) {
      var view, view_id;
      view_id = `view_${this.views.length}`;
      view = new Covid_19_Data_View(this, view_id);
      parent_elt.appendChild(view.elt);
      return this.views.push(view);
    }

  };

  Covid_19_Data_View = class Covid_19_Data_View {
    constructor(parent, id) {
      var columns;
      this.parent = parent;
      this.id = id;
      this.elt_id = `${this.id}-iew_`;
      this.elt = document.createElement('div');
      this.elt.setAttribute('id', this.elt_id);
      this.elt.setAttribute('class', 'covid-19-data-view');
      this.style_manager = new Style_Manager();
      this.h1_elt = document.createElement('h1');
      this.h1_elt.innerText = `Covid_19_Data_View - ${this.parent.main_column.name}`;
      this.elt.appendChild(this.h1_elt);
      this.date_elt = document.createElement('p');
      this.date_elt.innerText = `${this.parent.date}`;
      this.elt.appendChild(this.date_elt);
      this.toggle_button = document.createElement('button');
      this.toggle_button.setAttribute('id', 'toggle-button');
      this.toggle_button.innerText = "Toggle Style";
      this.toggle_button.onclick = this.style_manager.toggle_style;
      this.elt.appendChild(this.toggle_button);
      columns = [
        {
          key: 'rank',
          sort_order: 'none',
          heading_text: '#',
          classes: ['rank']
        },
        {
          key: this.parent.main_column.key,
          sort_order: 'ascending',
          heading_text: this.parent.main_column.name,
          classes: ['country',
        'main-column']
        },
        {
          key: 'population',
          sort_order: 'descending',
          heading_text: 'Population',
          classes: ['population']
        },
        {
          key: 'cases',
          sort_order: 'descending',
          heading_text: 'Cases',
          classes: ['cases']
        },
        {
          key: 'cases_per_million',
          sort_order: 'descending',
          heading_text: 'Cases / Million',
          classes: ['cases-per-million']
        },
        {
          key: 'deaths',
          sort_order: 'descending',
          heading_text: 'Deaths',
          classes: ['deaths']
        },
        {
          key: 'deaths_per_million',
          sort_order: 'descending',
          heading_text: 'Deaths / Million',
          classes: ['deaths-per-million']
        },
        {
          key: 'deaths_per_cent',
          sort_order: 'descending',
          heading_text: 'Deaths %',
          classes: ['deaths-per-cent']
        }
      ];
      this.table = new Sortable_Table(this.parent.data, columns);
      this.elt.appendChild(this.table.elt);
    }

  };

  if (typeof window !== "undefined" && window !== null) {
    window.Covid_19_Data = Covid_19_Data;
  } else {
    exports.Covid_19_Data = Covid_19_Data;
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/usr/local/server/git/clones/covid_19_data/src/covid_19_data.coffee