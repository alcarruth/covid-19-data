// Generated by CoffeeScript 2.5.1
(function() {
  //!/usr/bin/env coffee

  var Covid_Data, covid_data_url, fetch;

  if (typeof window === "undefined" || window === null) {
    fetch = require('node-fetch');
  }

  covid_data_url = "https://pomber.github.io/covid19/timeseries.json";

  Covid_Data = class Covid_Data {
    constructor(id, url) {
      //@install()
      this.get_data = this.get_data.bind(this);
      this.get_latest = this.get_latest.bind(this);
      this.create_table_elt = this.create_table_elt.bind(this);
      this.install = this.install.bind(this);
      this.id = id;
      this.url = url || covid_data_url;
    }

    async get_data() {
      var data, res;
      res = (await window.fetch(this.url));
      return data = (await res.json());
    }

    async get_latest() {
      var data, i, k, latest, v;
      data = (await this.get_data());
      i = data.US.length - 1;
      latest = {};
      for (k in data) {
        v = data[k];
        latest[k] = data[k][i];
      }
      return latest;
    }

    async create_table_elt() {
      var country, elt, latest, obj, row_num, rows;
      elt = document.createElement('table');
      elt.setAttribute('id', 'cv-data-table');
      elt.setAttribute('class', 'sort');
      latest = (await this.get_latest());
      rows = "";
      row_num = 1;
      for (country in latest) {
        obj = latest[country];
        rows += `<tr>
  <td class="cv-data-rank"> ${row_num++} </td>
  <td class="cv-data-country"> ${country} </td>
  <td class="cv-data-number"> ${obj.confirmed} </td>
  <td class="cv-data-number"> ${obj.deaths} </td>
  <td class="cv-data-number"> ${obj.recovered} </td>
</tr>
`;
      }
      elt.innerHTML = `<thead>
  <tr>
    <th data-sort-method='none' class='no-sort cv-data-rank'>#</th>
    <th class="cv-data-country">Country</th>
    <th class="cv-data-number">Cases</th>
    <th class="cv-data-number">Deaths</th>
    <th class="cv-data-number">Recovered</th>
  </tr>
</thead>
<tbody>
  ${rows}
</tbody>`;
      return elt;
    }

    async install() {
      this.parent_elt = document.getElementById(this.id);
      this.elt = (await this.create_table_elt());
      new Tablesort(this.elt);
      return this.parent_elt.appendChild(this.elt);
    }

  };

  if (typeof window === "undefined" || window === null) {
    exports.Covid_Data = Covid_Data;
    exports.covid_data = new Covid_Data();
  } else {
    window.covid_data = new Covid_Data('corona-virus-data');
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY292aWRfZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiIsInNvdXJjZXMiOlsic3JjL2NvdmlkX2RhdGEuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQztFQUFBOztBQUFBLE1BQUEsVUFBQSxFQUFBLGNBQUEsRUFBQTs7RUFFRCxJQUFJLGdEQUFKO0lBQ0UsS0FBQSxHQUFRLE9BQUEsQ0FBUSxZQUFSLEVBRFY7OztFQUdBLGNBQUEsR0FBaUI7O0VBR1gsYUFBTixNQUFBLFdBQUE7SUFFRSxXQUFhLEdBQUEsRUFBTSxHQUFOLENBQUEsRUFBQTs7VUFJYixDQUFBLGVBQUEsQ0FBQTtVQUlBLENBQUEsaUJBQUEsQ0FBQTtVQVFBLENBQUEsdUJBQUEsQ0FBQTtVQWtDQSxDQUFBLGNBQUEsQ0FBQTtNQWxEYyxJQUFDLENBQUE7TUFDYixJQUFDLENBQUEsR0FBRCxHQUFPLEdBQUEsSUFBTztJQURIOztJQUlILE1BQVYsUUFBVSxDQUFBLENBQUE7QUFDWixVQUFBLElBQUEsRUFBQTtNQUFJLEdBQUEsR0FBTSxDQUFBLE1BQU0sTUFBTSxDQUFDLEtBQVAsQ0FBYSxJQUFDLENBQUEsR0FBZCxDQUFOO2FBQ04sSUFBQSxHQUFPLENBQUEsTUFBTSxHQUFHLENBQUMsSUFBSixDQUFBLENBQU47SUFGQzs7SUFJRSxNQUFaLFVBQVksQ0FBQSxDQUFBO0FBQ2QsVUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUE7TUFBSSxJQUFBLEdBQU8sQ0FBQSxNQUFNLElBQUMsQ0FBQSxRQUFELENBQUEsQ0FBTjtNQUNQLENBQUEsR0FBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQVIsR0FBZTtNQUNuQixNQUFBLEdBQVMsQ0FBQTtNQUNULEtBQUEsU0FBQTs7UUFDRSxNQUFNLENBQUMsQ0FBRCxDQUFOLEdBQVksSUFBSSxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQ7TUFEckI7QUFFQSxhQUFPO0lBTkc7O0lBUU0sTUFBbEIsZ0JBQWtCLENBQUEsQ0FBQTtBQUNwQixVQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7TUFBSSxHQUFBLEdBQU0sUUFBUSxDQUFDLGFBQVQsQ0FBdUIsT0FBdkI7TUFDTixHQUFHLENBQUMsWUFBSixDQUFpQixJQUFqQixFQUF1QixlQUF2QjtNQUNBLEdBQUcsQ0FBQyxZQUFKLENBQWlCLE9BQWpCLEVBQTBCLE1BQTFCO01BQ0EsTUFBQSxHQUFTLENBQUEsTUFBTSxJQUFDLENBQUEsVUFBRCxDQUFBLENBQU47TUFDVCxJQUFBLEdBQU87TUFDUCxPQUFBLEdBQVU7TUFDVixLQUFBLGlCQUFBOztRQUNFLElBQUEsSUFBUSxDQUFBOzRCQUFBLENBQUEsQ0FFd0IsT0FBQSxFQUZ4QixDQUFBOytCQUFBLENBQUEsQ0FHMkIsT0FIM0IsQ0FBQTs4QkFBQSxDQUFBLENBSTBCLEdBQUcsQ0FBQyxTQUo5QixDQUFBOzhCQUFBLENBQUEsQ0FLMEIsR0FBRyxDQUFDLE1BTDlCLENBQUE7OEJBQUEsQ0FBQSxDQU0wQixHQUFHLENBQUMsU0FOOUIsQ0FBQTs7QUFBQTtNQURWO01BV0EsR0FBRyxDQUFDLFNBQUosR0FBZ0IsQ0FBQTs7Ozs7Ozs7OztFQUFBLENBQUEsQ0FXUixJQVhRLENBQUE7UUFBQTtBQWNoQixhQUFPO0lBaENTOztJQWtDVCxNQUFULE9BQVMsQ0FBQSxDQUFBO01BQ1AsSUFBQyxDQUFBLFVBQUQsR0FBYyxRQUFRLENBQUMsY0FBVCxDQUF3QixJQUFDLENBQUEsRUFBekI7TUFDZCxJQUFDLENBQUEsR0FBRCxHQUFPLENBQUEsTUFBTSxJQUFDLENBQUEsZ0JBQUQsQ0FBQSxDQUFOO01BQ1AsSUFBSSxTQUFKLENBQWMsSUFBQyxDQUFBLEdBQWY7YUFDQSxJQUFDLENBQUEsVUFBVSxDQUFDLFdBQVosQ0FBd0IsSUFBQyxDQUFBLEdBQXpCO0lBSk87O0VBcERYOztFQTBEQSxJQUFJLGdEQUFKO0lBQ0UsT0FBTyxDQUFDLFVBQVIsR0FBcUI7SUFDckIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsSUFBSSxVQUFKLENBQUEsRUFGdkI7R0FBQSxNQUFBO0lBSUUsTUFBTSxDQUFDLFVBQVAsR0FBb0IsSUFBSSxVQUFKLENBQWUsbUJBQWYsRUFKdEI7O0FBbEVDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgY29mZmVlXG4jXG5cbmlmICF3aW5kb3c/IFxuICBmZXRjaCA9IHJlcXVpcmUoJ25vZGUtZmV0Y2gnKVxuXG5jb3ZpZF9kYXRhX3VybCA9IFwiaHR0cHM6Ly9wb21iZXIuZ2l0aHViLmlvL2NvdmlkMTkvdGltZXNlcmllcy5qc29uXCJcblxuXG5jbGFzcyBDb3ZpZF9EYXRhXG5cbiAgY29uc3RydWN0b3I6IChAaWQsIHVybCkgLT5cbiAgICBAdXJsID0gdXJsIHx8IGNvdmlkX2RhdGFfdXJsXG4gICAgI0BpbnN0YWxsKClcbiAgICBcbiAgZ2V0X2RhdGE6ID0+XG4gICAgcmVzID0gYXdhaXQgd2luZG93LmZldGNoKEB1cmwpXG4gICAgZGF0YSA9IGF3YWl0IHJlcy5qc29uKClcblxuICBnZXRfbGF0ZXN0OiA9PlxuICAgIGRhdGEgPSBhd2FpdCBAZ2V0X2RhdGEoKVxuICAgIGkgPSBkYXRhLlVTLmxlbmd0aC0xXG4gICAgbGF0ZXN0ID0ge31cbiAgICBmb3Igayx2IG9mIGRhdGFcbiAgICAgIGxhdGVzdFtrXSA9IGRhdGFba11baV1cbiAgICByZXR1cm4gbGF0ZXN0XG5cbiAgY3JlYXRlX3RhYmxlX2VsdDogPT5cbiAgICBlbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpXG4gICAgZWx0LnNldEF0dHJpYnV0ZSgnaWQnLCAnY3YtZGF0YS10YWJsZScpXG4gICAgZWx0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc29ydCcpXG4gICAgbGF0ZXN0ID0gYXdhaXQgQGdldF9sYXRlc3QoKVxuICAgIHJvd3MgPSBcIlwiXG4gICAgcm93X251bSA9IDFcbiAgICBmb3IgY291bnRyeSxvYmogb2YgbGF0ZXN0XG4gICAgICByb3dzICs9IFwiXCJcIlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkIGNsYXNzPVwiY3YtZGF0YS1yYW5rXCI+ICN7cm93X251bSsrfSA8L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cImN2LWRhdGEtY291bnRyeVwiPiAje2NvdW50cnl9IDwvdGQ+XG4gICAgICAgICAgPHRkIGNsYXNzPVwiY3YtZGF0YS1udW1iZXJcIj4gI3tvYmouY29uZmlybWVkfSA8L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cImN2LWRhdGEtbnVtYmVyXCI+ICN7b2JqLmRlYXRoc30gPC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9XCJjdi1kYXRhLW51bWJlclwiPiAje29iai5yZWNvdmVyZWR9IDwvdGQ+XG4gICAgICAgIDwvdHI+XG5cbiAgICAgIFwiXCJcIlxuICAgIGVsdC5pbm5lckhUTUwgPSBcIlwiXCJcbiAgICAgICAgPHRoZWFkPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aCBkYXRhLXNvcnQtbWV0aG9kPSdub25lJyBjbGFzcz0nbm8tc29ydCBjdi1kYXRhLXJhbmsnPiM8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzPVwiY3YtZGF0YS1jb3VudHJ5XCI+Q291bnRyeTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3M9XCJjdi1kYXRhLW51bWJlclwiPkNhc2VzPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzcz1cImN2LWRhdGEtbnVtYmVyXCI+RGVhdGhzPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzcz1cImN2LWRhdGEtbnVtYmVyXCI+UmVjb3ZlcmVkPC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgI3tyb3dzfVxuICAgICAgICA8L3Rib2R5PlxuICAgIFwiXCJcIlxuICAgIHJldHVybiBlbHRcblxuICBpbnN0YWxsOiA9PlxuICAgIEBwYXJlbnRfZWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoQGlkKVxuICAgIEBlbHQgPSBhd2FpdCBAY3JlYXRlX3RhYmxlX2VsdCgpXG4gICAgbmV3IFRhYmxlc29ydChAZWx0KVxuICAgIEBwYXJlbnRfZWx0LmFwcGVuZENoaWxkKEBlbHQpXG4gICAgICAgIFxuaWYgIXdpbmRvdz8gXG4gIGV4cG9ydHMuQ292aWRfRGF0YSA9IENvdmlkX0RhdGFcbiAgZXhwb3J0cy5jb3ZpZF9kYXRhID0gbmV3IENvdmlkX0RhdGEoKVxuZWxzZVxuICB3aW5kb3cuY292aWRfZGF0YSA9IG5ldyBDb3ZpZF9EYXRhKCdjb3JvbmEtdmlydXMtZGF0YScpXG4iXX0=
//# sourceURL=/var/www/git/projects/Corona_Virus/src/covid_data.coffee